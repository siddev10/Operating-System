#include <stdio.h>
#include <stdlib.h>

struct process {
    int pid;
    int at;
    int bt;
    int ct;
    int tat;
    int wt;
    int rt;
    int pr;
    int is_completed;
};

int main() {
    int n;
    printf("Enter no. of processes:\n");
    scanf("%d", &n);

    struct process* p = (struct process*)malloc(n * sizeof(struct process));

    printf("Enter process id:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].pid);
    }

    printf("Enter arrival time of each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].at);
    }

    printf("Enter burst time of each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].bt);
        p[i].is_completed = 0;
    }

    printf("Enter priority of each process (higher number = higher priority):\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &p[i].pr);
    }

    int completed = 0, current_time = 0;
    int min_at = 1000, max_ct = 0;

    while (completed < n) {
        int max_priority = -1;
        int idx = -1;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && p[i].is_completed == 0) {
                if (p[i].pr > max_priority) {
                    max_priority = p[i].pr;
                    idx = i;
                }
            }
        }
        if (idx == -1) {
            current_time++;
        } else {
            p[idx].ct = current_time + p[idx].bt;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].bt;
            p[idx].rt = current_time - p[idx].at;
            current_time = p[idx].ct;
            p[idx].is_completed = 1;
            completed++;
        }
    }

    printf("\nProcess no.  AT  BT  PR  CT  TAT  WT  RT\n");

    float total_tat = 0, total_wt = 0, total_rt = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d          %d   %d   %d   %d   %d    %d    %d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].pr,
               p[i].ct, p[i].tat, p[i].wt, p[i].rt);
        total_tat += p[i].tat;
        total_wt += p[i].wt;
        total_rt += p[i].rt;

        if (p[i].at < min_at) {
            min_at = p[i].at;
        }
        if (p[i].ct > max_ct) {
            max_ct = p[i].ct;
        }
    }

    float sl = max_ct - min_at;
    float th = (float)n / sl;

    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);
    printf("Average Response Time: %.2f\n", total_rt / n);
    printf("Schedule Length: %.2f\n", sl);
    printf("Throughput: %.2f process/unit time\n", th);

    free(p);
    return 0;
}

Output:

Enter no. of processes:
4
Enter process id:
1 2 3 4
Enter arrival time of each process:
0 1 3 5
Enter burst time of each process:
5 4 2 3
Enter priority of each process (higher number = higher priority):
2 5 10 7

Process no.  AT  BT  PR  CT  TAT  WT  RT
P1          0   5   2   5   5    0    0
P2          1   4   5   14   13    9    9
P3          3   2   10   7   4    2    2
P4          5   3   7   10   5    2    2

Average Turnaround Time: 6.75
Average Waiting Time: 3.25
Average Response Time: 3.25
Schedule Length: 14.00
Throughput: 0.29 process/unit time
